//////////////////////////////////////////////////////////
// @Project:        RobotController_CC
// @File:           RobotController.h
// @Author:         Louis
// @CreateTime:     2019-10-15 16:48
// @Description:    
//////////////////////////////////////////////////////////

#ifndef ROBOTCONTROLLER_CC_ROBOTCONTROLLER_H
#define ROBOTCONTROLLER_CC_ROBOTCONTROLLER_H

#include<iostream>
#include<vector>
#include<string>
#include <sstream>


class RobotController {
public:
    /***************************************************************
     * RobotController：构造函数
     *   初始化成员变量m_buffer，和机械臂控制柜进行socket连接，连接过程发送
     *   "OK"确认信息，如果连接成功，则控制柜会回复确认信息"OK"。
     ***************************************************************/
    RobotController();

    /***************************************************************
    * ~RobotController：析构函数
    *   关闭socket连接。
    ***************************************************************/
    ~RobotController();

    /***************************************************************
     * SendOK：
     *   和控制柜socket通信时，向机械臂发送"OK"确认信息，如果socket连接成功，
     *   将接收到回复的确认"OK"。
     ***************************************************************/
    void SendOK();

    /***************************************************************
     * MoveByCar：
     *  向机械臂发送1，通过笛卡尔坐标移动机械臂。
     *
     * 参数：
     *  carPos:     笛卡尔坐标([x,y,z,A,B,C], 精度：两位小数)
     **************************************************************/
    void MoveByCar(const std::vector<double> &carPos) const;

    /***************************************************************
     * MoveCarByOffset：
     *  向机械臂发送3，通过笛卡尔坐标偏移量移动机械臂。
     *
     * 参数：
     *  offset:     各轴笛卡尔偏移量（精度：两位小数)
     **************************************************************/
    void MoveCarByOffset(const std::vector<double> & offset) const;

    /***************************************************************
     * GetCurrentCarPos：
     *  向机械臂发送7，机械臂发送六个浮点数，即笛卡尔坐标值。
     *
     * 返回值：笛卡尔坐标值(x,y,z,A,B,C)
     **************************************************************/
    std::vector<double> GetCurrentCarPos() const;

    /***************************************************************
     * MoveByAxis：
     *  向机械臂发送0，通过关节坐标移动机械臂，需将弧度转换成度，
     *  并将1、2、6轴取反。
     *
     * 参数：
     *  carPos:    关节坐标(a1,a2,a3,a4,a5,a6), 精度：两位小数)
     **************************************************************/
    void MoveByAxis(std::vector<double> axisPos) const;

    /***************************************************************
     * MoveByJointTrajectory：
     *  向机械臂发送9，通过关节路点控制机械臂运动。
     *
     * 参数：
     *  trajectoryPoints:     关节路点
     **************************************************************/
    void MoveByJointTrajectory(std::vector< std::vector<double> > trajectoryPoints) const;

    /***************************************************************
     * MoveAxisByOffset：
     *  向机械臂发送2，通过笛卡尔坐标偏移量移动机械臂。
     *
     * 参数：
     *  offset:     各轴关节偏移量（精度：两位小数)
     **************************************************************/
    void MoveAxisByOffset(const std::vector<double> &offset) const;

    /***************************************************************
     * GetCurrentAxisPos：
     *  向机械臂发送6，机械臂发送六个浮点数，即关节坐标值。
     *
     * 返回值：关节坐标值(a1,a2,a3,a4,a5,a6)
     **************************************************************/
    std::vector<double> GetCurrentAxisPos() const;

    /***************************************************************
     * OpenPaw：
     *  向机械臂发送4，张开夹持器。
     *
     * 参数：
     *  pulseCnt:     夹持器张开行程的脉冲信号，300为最大张开行程
     **************************************************************/
    void OpenPaw(int pulseCnt = 300) const;

    /***************************************************************
     * ClosePaw：
     *  向机械臂发送5，闭合夹持器。
     *
     * 参数：
     *  pulseCnt:     夹持器闭合行程的脉冲信号，300为最大闭合行程
     **************************************************************/
    void ClosePaw(int pulseCnt = 300) const;

    /***************************************************************
     * SetSpeed：
     *  向机械臂发送8，设置机械臂运动的速度。
     *
     * 参数：
     *  rate:     速度等级（1-10），即设置速度为原速度的speed_rate/10。
     **************************************************************/
    void SetSpeed(int rate = 10) const;

    /***************************************************************
     * PrintLog：
     *  打印信息封装，便于后续的日志输出重写。
     *
     * 参数：
     *  log:     日志内容
     **************************************************************/
    void PrintLog(const std::string& log) const;

    /***************************************************************
     * String2Double：
     *  将字符串std::string转换成double类型数据。
     *
     * 参数：
     *  s:     日志内容
     *
     * 返回值：转换结果
     **************************************************************/
    double String2Double(const std::string& s) const;

    /***************************************************************
     * Delay：
     *  用于锁定操作，直到机械臂完成某个命令。
     **************************************************************/
    void Delay() const;

protected:
    /***************************************************************
     * Send：
     *  将socket通信时发送数据write函数进行封装。
     *
     * 参数：
     *  s:     发送数据内容
     **************************************************************/
    void Send(const std::string& s) const;

    /***************************************************************
     * Receive：
     *  将socket通信时接收数据read函数进行封装，此处使用成员字符串数组m_buffer
     * 作为缓存空间，
     *  大小为256，考虑到实际使用情况，该大小空间足够使用。
     *
     * 返回值：接收到的数据
     **************************************************************/
    std::string Receive(int n = 256) const;

private:
    // socket通信的id。
    int m_sockfd;
    // 用于接收数据时作为缓存空间，空间大小可适当进行调节。
    mutable char m_buffer[256];
};


#endif //ROBOTCONTROLLER_CC_ROBOTCONTROLLER_H
